{
  "address": "0xf5dcD1E23991f6675944a9B1047Bc47d0011a5d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "DisableGovernanceUnlockability",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "unlocked",
          "type": "bool"
        }
      ],
      "name": "GovernanceUnlockChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "TokenNameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldSymbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        }
      ],
      "name": "TokenSymbolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unlocked",
          "type": "bool"
        }
      ],
      "name": "changeLockStatusByGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unlockableByGovernance",
          "type": "bool"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "disableUnlockableByGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lockId",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "unclaimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "unlockTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "holdingContract",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "unlockableByGovernance",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "unlockedByGovernance",
              "type": "bool"
            }
          ],
          "internalType": "struct Locker.Lock",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "isValidLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastLockId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "setTokenNameAndSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x857c20cca540366c445b2437b7e432d0f14523b4cbc875d05e561772208404a3",
  "receipt": {
    "to": "0xdbfD940f57E63049039404c1b35b9e47e90F2B3e",
    "from": "0xa66745F0092F7460F107E4c66C224553bF4Cd727",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3205254",
    "logsBloom": "0x
    "blockHash": "0x8d08d58f08c7ad78cf6edeac0f3e100f41b561b87bbc5cf6185c6537a4e077f0",
    "transactionHash": "0x857c20cca540366c445b2437b7e432d0f14523b4cbc875d05e561772208404a3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18711942,
        "transactionHash": "0x857c20cca540366c445b2437b7e432d0f14523b4cbc875d05e561772208404a3",
        "address": "0xf5dcD1E23991f6675944a9B1047Bc47d0011a5d8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbfd940f57e63049039404c1b35b9e47e90f2b3e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8d08d58f08c7ad78cf6edeac0f3e100f41b561b87bbc5cf6185c6537a4e077f0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18711942,
        "transactionHash": "0x857c20cca540366c445b2437b7e432d0f14523b4cbc875d05e561772208404a3",
        "address": "0xf5dcD1E23991f6675944a9B1047Bc47d0011a5d8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dbfd940f57e63049039404c1b35b9e47e90f2b3e",
          "0x000000000000000000000000a66745f0092f7460f107e4c66c224553bf4cd727"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8d08d58f08c7ad78cf6edeac0f3e100f41b561b87bbc5cf6185c6537a4e077f0"
      }
    ],
    "blockNumber": 18711942,
    "cumulativeGasUsed": "3205254",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa66745F0092F7460F107E4c66C224553bF4Cd727"
  ],
  "solcInputHash": "71ba2e006a303c95eb2b44ee05c15df7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"DisableGovernanceUnlockability\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"name\":\"GovernanceUnlockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"TokenNameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"TokenSymbolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"name\":\"changeLockStatusByGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlockableByGovernance\",\"type\":\"bool\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"disableUnlockableByGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unclaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holdingContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unlockableByGovernance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unlockedByGovernance\",\"type\":\"bool\"}],\"internalType\":\"struct Locker.Lock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"isValidLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLockId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setTokenNameAndSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Muse\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"changeLockStatusByGovernance(uint256,bool)\":{\"details\":\"This can be useful in case the owner makes a mistake during deployment and the actual withdraw can only be done by the consent of both parties.The frontend should clearly indicate when a lock is unlockable and when it is actually unlocked.\"},\"createLock(address,uint256,uint256,bool)\":{\"params\":{\"amount\":\"The amount of tokens to transfer in\",\"token\":\"The token to transfer in\",\"unlockTimestamp\":\"The timestamp from which withdrawals become possible\",\"unlockableByGovernance\":\"Indicates whether the Locker operator should be able to unlock\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getLock(uint256)\":{\"details\":\"The lock data should be indexed using TheGraph or similar to ensure users can always easily find their lockIds.Reverts in case the lockId is out of range.\",\"returns\":{\"_0\":\"The lock related to the lockId.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lastLockId()\":{\"details\":\"A lastLockId of zero means there are no locks yet!\",\"returns\":{\"_0\":\"The id of the latest lock.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"lockId\":\"The id of the locked position\"}}},\"title\":\"Violin's locker contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeLockStatusByGovernance(uint256,bool)\":{\"notice\":\"In case the lock owner allows it, governance can disable the timelock.\"},\"createLock(address,uint256,uint256,bool)\":{\"notice\":\"Creates a new lock by transferring 'amount' to a newly created holding contract.An NFT with the lockId is minted to the user. This NFT is transferrable and represents the ownership of the lock.\"},\"disableUnlockableByGovernance(uint256)\":{\"notice\":\"if the lock owner wants to reduce their privileges further in case they gave governance unlockability, they can call this function.\"},\"getLock(uint256)\":{\"notice\":\"Returns information about a specific Lock.\"},\"isValidLock(uint256)\":{\"notice\":\"returns whether the lockId exists (is created)\"},\"lastLockId()\":{\"notice\":\"Gets the incremental id of the most recent lock. The first lock is at id 1.\"},\"name()\":{\"notice\":\"Override the token name to allow for rebranding.\"},\"operator()\":{\"notice\":\"The operator can disable the unlockTimestamp (make a lock withdrawable) if the lock creator permits this.\"},\"setTokenNameAndSymbol(string,string)\":{\"notice\":\"The token name and symbol are upgradeable in case of rebranding.\"},\"symbol()\":{\"notice\":\"Override the token symbol to allow for rebranding.\"},\"transferOperator(address)\":{\"notice\":\"Transfer the operator address to a new address, only callable by owner.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws 'amount' amount of tokens from the locked position. Can only be called by the current owner of the lock NFT.Once the remaining amount reaches zero, the NFT is burned.The ownership share is therefore not fractional as it would complicate things for the user.\"}},\"notice\":\"The locker contract allows project admins to lock LP tokens for a period\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Locker.sol\":\"Locker\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Locker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Violin's locker contract\\n * @notice The locker contract allows project admins to lock LP tokens for a period\\n * @author Muse\\n */ \\ncontract Locker is ERC721Enumerable, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Counters for Counters.Counter;\\n\\n    struct Lock {\\n        /// @notice The unique identifier of the lock\\n        uint256 lockId;\\n        /// @notice The token which was locked\\n        IERC20 token;\\n        /// @notice The creator of the lock which might no longer own the lock share\\n        address creator;\\n        /// @notice The amount of tokens initially locked\\n        uint256 amount;\\n        /// @notice Whether this Lock is still claimable, true from creation until withdrawal.\\n        bool unclaimed;\\n        /// @notice The unix timestamp in seconds after which withdrawing the tokens is allowed\\n        uint256 unlockTimestamp;\\n        /// @notice The address of the holding contract\\n        address holdingContract;\\n        /// @notice Indicates that the Locker governance (operator) can disable the timelock (unlockTimestamp) on this lock.\\n        /// @notice This could be useful in case the lock owner is scared about deployment issues for example.\\n        bool unlockableByGovernance;\\n        /// @notice Indicates whether the Locker governance (operator) has unlocked this lock for early withdrawal by the lock owner.\\n        /// @notice Can only be set to true by Locker governance (operator) if unlockableByGovernance is set to true.\\n        bool unlockedByGovernance;\\n    }\\n\\n    /// @notice The operator can disable the unlockTimestamp (make a lock withdrawable) if the lock creator permits this.\\n    address public operator;\\n\\n    /// @notice An incremental counter that stores the latest lockId (zero means no locks yet).\\n    Counters.Counter private lockIdCounter;\\n\\n    /// @notice The list of all locks ever created, the key represents the lockId.\\n    mapping(uint256 => Lock) private locks;\\n\\n    /// @notice Changeable name for the share token.\\n    string private tokenName = \\\"Violin LP Lock\\\";\\n    /// @notice Changeable symbol for the share token.\\n    string private tokenSymbol = \\\"LP_LOCK\\\";\\n\\n    event LockCreated(\\n        uint256 indexed lockId,\\n        address indexed token,\\n        address indexed creator,\\n        uint256 amount\\n    );\\n\\n    event Withdraw(\\n        uint256 indexed lockId,\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n\\n    event TokenNameChanged(string oldName, string newName);\\n\\n    event TokenSymbolChanged(string oldSymbol, string newSymbol);\\n\\n    event GovernanceUnlockChanged(uint256 indexed lockId, bool unlocked);\\n    event DisableGovernanceUnlockability(uint256 indexed lockId);\\n\\n    event OperatorTransferred(address oldOperator, address newOperator);\\n\\n    constructor(address initialOwner) ERC721(tokenName, tokenSymbol) {\\n        transferOwnership(initialOwner);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"only operator\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Creates a new lock by transferring 'amount' to a newly created holding contract.\\n     * @notice An NFT with the lockId is minted to the user. This NFT is transferrable and represents the ownership of the lock.\\n     * @param token The token to transfer in\\n     * @param amount The amount of tokens to transfer in\\n     * @param unlockTimestamp The timestamp from which withdrawals become possible\\n     * @param unlockableByGovernance Indicates whether the Locker operator should be able to unlock\\n     */\\n    function createLock(\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 unlockTimestamp,\\n        bool unlockableByGovernance\\n    ) external nonReentrant {\\n        require(amount > 0, \\\"zero amount\\\");\\n        require(unlockTimestamp > block.timestamp, \\\"time passed\\\");\\n        require(\\n            unlockTimestamp < 10000000000 ||\\n                unlockTimestamp == type(uint256).max,\\n            \\\"too far away\\\"\\n        );\\n\\n        lockIdCounter.increment();\\n        uint256 lockId = lockIdCounter.current();\\n\\n        address holdingContract = address(new HoldingContract());\\n\\n        // Before-after pattern is used to figure out the amount actually received, requires reentrancy guard.\\n        uint256 balanceBefore = token.balanceOf(holdingContract);\\n        token.safeTransferFrom(msg.sender, holdingContract, amount);\\n        amount = token.balanceOf(holdingContract) - balanceBefore;\\n\\n        // It is practically impossible for the lock to already be created, since theoretically counter could eventually overflow we use require in favor of assert.\\n        require(locks[lockId].creator == address(0), \\\"already exists\\\");\\n\\n        locks[lockId] = Lock({\\n            lockId: lockId,\\n            token: token,\\n            creator: msg.sender,\\n            amount: amount,\\n            unclaimed: true,\\n            unlockTimestamp: unlockTimestamp,\\n            holdingContract: holdingContract,\\n            unlockableByGovernance: unlockableByGovernance,\\n            unlockedByGovernance: false\\n        });\\n\\n        // The ownership share is minted to the creator.\\n        // It should be noted that anyone can unlock the lock if they own the share.\\n        _mint(msg.sender, lockId);\\n\\n        emit LockCreated(lockId, address(token), msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws 'amount' amount of tokens from the locked position. Can only be called by the current owner of the lock NFT.\\n     * @notice Once the remaining amount reaches zero, the NFT is burned.\\n     * @notice The ownership share is therefore not fractional as it would complicate things for the user.\\n     * @param lockId The id of the locked position\\n     */\\n    function withdraw(uint256 lockId) external nonReentrant {\\n        require(isValidLock(lockId), \\\"invalid lock id\\\");\\n\\n        Lock storage lock = locks[lockId];\\n        IERC20 token = lock.token;\\n        address holdingContract = lock.holdingContract;\\n\\n        require(\\n            block.timestamp >= lock.unlockTimestamp ||\\n                lock.unlockedByGovernance,\\n            \\\"still locked\\\"\\n        );\\n        require(lock.unclaimed, \\\"already claimed\\\");\\n        require(ownerOf(lockId) == msg.sender, \\\"not owner of lock share token\\\");\\n\\n        // Mark lock as claimed and burn ownership token\\n        lock.unclaimed = false;\\n        _burn(lockId);\\n\\n        uint256 amount = token.balanceOf(holdingContract);\\n        // Transfer out tokens to sender\\n\\n        HoldingContract(holdingContract).transferTo(\\n            token,\\n            msg.sender,\\n            amount\\n        );\\n\\n        emit Withdraw(lockId, address(lock.token), msg.sender, amount);\\n    }\\n\\n    /// @notice if the lock owner wants to reduce their privileges further in case they gave governance unlockability, they can call this function.\\n    function disableUnlockableByGovernance(uint256 lockId)\\n        external\\n        nonReentrant\\n    {\\n        require(isValidLock(lockId), \\\"invalid lock id\\\");\\n        require(ownerOf(lockId) == msg.sender, \\\"not owner of lock share token\\\");\\n        Lock storage lock = locks[lockId];\\n        require(lock.unlockableByGovernance, \\\"already not unlockable\\\");\\n\\n        lock.unlockableByGovernance = false;\\n        lock.unlockedByGovernance = false;\\n\\n        emit DisableGovernanceUnlockability(lockId);\\n    }\\n\\n    /// @notice All though unnecessary, add reentrancy guard to token transfer in defense.\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override nonReentrant {\\n        super._transfer(from, to, tokenId);\\n    }\\n\\n    //* VIEW FUNCTIONS *//\\n\\n    /// @notice returns whether the lockId exists (is created)\\n    function isValidLock(uint256 lockId) public view returns (bool) {\\n        return lockId != 0 && lockId <= lockIdCounter.current();\\n    }\\n\\n    /**\\n     * @notice Returns information about a specific Lock.\\n     * @dev The lock data should be indexed using TheGraph or similar to ensure users can always easily find their lockIds.\\n     * @dev Reverts in case the lockId is out of range.\\n     * @return The lock related to the lockId.\\n     */\\n    function getLock(uint256 lockId) external view returns (Lock memory) {\\n        require(isValidLock(lockId), \\\"out of range\\\");\\n\\n        return locks[lockId];\\n    }\\n\\n    /**\\n     * @notice Gets the incremental id of the most recent lock. The first lock is at id 1.\\n     * @dev A lastLockId of zero means there are no locks yet!\\n     * @return The id of the latest lock.\\n     */\\n    function lastLockId() external view returns (uint256) {\\n        return lockIdCounter.current();\\n    }\\n\\n    //* GOVERNANCE FUNCTIONS *//\\n\\n    /// @notice The token name and symbol are upgradeable in case of rebranding.\\n    function setTokenNameAndSymbol(\\n        string calldata _name,\\n        string calldata _symbol\\n    ) external onlyOwner {\\n        if (!stringsEqual(tokenName, _name)) {\\n            string memory oldName = tokenName;\\n            tokenName = _name;\\n            emit TokenNameChanged(oldName, _name);\\n        }\\n\\n        if (!stringsEqual(tokenSymbol, _symbol)) {\\n            string memory oldSymbol = tokenSymbol;\\n            tokenSymbol = _symbol;\\n            emit TokenSymbolChanged(oldSymbol, _symbol);\\n        }\\n    }\\n\\n    /**\\n     * @notice In case the lock owner allows it, governance can disable the timelock.\\n     * @dev This can be useful in case the owner makes a mistake during deployment and the actual withdraw can only be done by the consent of both parties.\\n     * @dev The frontend should clearly indicate when a lock is unlockable and when it is actually unlocked.\\n     */\\n    function changeLockStatusByGovernance(uint256 lockId, bool unlocked)\\n        external\\n        onlyOperator\\n        nonReentrant\\n    {\\n        require(isValidLock(lockId), \\\"invalid lock\\\");\\n        Lock storage lock = locks[lockId];\\n        require(lock.unlockableByGovernance, \\\"not allowed to unlock\\\");\\n        require(lock.unlockedByGovernance != unlocked, \\\"already set\\\");\\n\\n        lock.unlockedByGovernance = unlocked;\\n\\n        emit GovernanceUnlockChanged(lockId, unlocked);\\n    }\\n\\n    /// @notice Transfer the operator address to a new address, only callable by owner.\\n    function transferOperator(address newOperator)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(newOperator != operator, \\\"already set\\\");\\n        address oldOperator = operator;\\n\\n        operator = newOperator;\\n\\n        emit OperatorTransferred(oldOperator, newOperator);\\n    }\\n\\n    //* OTHERS *//\\n\\n    /// @notice Override the token name to allow for rebranding.\\n    function name() public view override returns (string memory) {\\n        return tokenName;\\n    }\\n\\n    /// @notice Override the token symbol to allow for rebranding.\\n    function symbol() public view override returns (string memory) {\\n        return tokenSymbol;\\n    }\\n\\n    function stringsEqual(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\\n/**\\n * @title Violin's HoldingContract to manage individually locked positions.\\n * @notice The HoldingContract stores an individually locked position, it can only be unlocked by the main locker address, which should be a Violin locker.\\n * @author Muse\\n */\\ncontract HoldingContract {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The locker contract contains the actual information of the lock and is the only address that can unlock funds.\\n    address public immutable locker;\\n\\n    constructor() {\\n        locker = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Allows locker contract to transfer an amount of tokens in the HoldingContract to the recipient\\n     * @dev All though there is no explicit locking mechanism here, this contract is supposed to be created and managed by the Locker, which has such functionality.\\n     * @dev For users that are inspecting this contract, we recommend checking the web interface to find out what the locking details are of this lock.\\n     */\\n    function transferTo(\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external {\\n        require(msg.sender == locker);\\n        token.safeTransfer(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xdc3e3814d2f6750a47a71e3c58e89b529470615c73506c22284bd7366ccd09bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600e60808190526d56696f6c696e204c50204c6f636b60901b60a09081526200003191600f919062000343565b50604080518082019091526007808252664c505f4c4f434b60c81b6020909201918252620000629160109162000343565b503480156200007057600080fd5b5060405162003a8438038062003a848339810160408190526200009391620003e9565b600f8054620000a2906200041b565b80601f0160208091040260200160405190810160405280929190818152602001828054620000d0906200041b565b8015620001215780601f10620000f55761010080835404028352916020019162000121565b820191906000526020600020905b8154815290600101906020018083116200010357829003601f168201915b50505050506010805462000135906200041b565b80601f016020809104026020016040519081016040528092919081815260200182805462000163906200041b565b8015620001b45780601f106200018857610100808354040283529160200191620001b4565b820191906000526020600020905b8154815290600101906020018083116200019657829003601f168201915b50508451620001ce93506000925060208601915062000343565b508051620001e490600190602084019062000343565b50505062000201620001fb6200021860201b60201c565b6200021c565b6001600b5562000211816200026e565b5062000458565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620002ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b038116620003355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620002c5565b62000340816200021c565b50565b82805462000351906200041b565b90600052602060002090601f016020900481019282620003755760008555620003c0565b82601f106200039057805160ff1916838001178555620003c0565b82800160010185558215620003c0579182015b82811115620003c0578251825591602001919060010190620003a3565b50620003ce929150620003d2565b5090565b5b80821115620003ce5760008155600101620003d3565b600060208284031215620003fc57600080fd5b81516001600160a01b03811681146200041457600080fd5b9392505050565b600181811c908216806200043057607f821691505b602082108114156200045257634e487b7160e01b600052602260045260246000fd5b50919050565b61361c80620004686000396000f3fe608060405234801561001057600080fd5b506004361061018f5760003560e01c806370a08231116100e4578063a3f7970b11610092578063a3f7970b14610327578063b88d4fde1461033a578063c87b56dd1461034d578063d0cb39c614610360578063d68f4dd114610368578063db16143a14610388578063e985e9c51461039b578063f2fde38b146103ae57600080fd5b806370a08231146102c3578063715018a6146102d65780637f0e964b146102de5780638da5cb5b146102f157806395d89b41146102f95780639a708be314610301578063a22cb4651461031457600080fd5b806329605e771161014157806329605e771461023e5780632e1a7d4d146102515780632f745c591461026457806342842e0e146102775780634f6ccce71461028a578063570ca7351461029d5780636352211e146102b057600080fd5b806301ffc9a71461019457806306fdde03146101bc578063081812fc146101d1578063095ea7b3146101f1578063143f39ee1461020657806318160ddd1461021957806323b872dd1461022b575b600080fd5b6101a76101a2366004612abb565b6103c1565b60405190151581526020015b60405180910390f35b6101c46103ec565b6040516101b39190612cee565b6101e46101df366004612bab565b61047e565b6040516101b39190612c79565b6102046101ff366004612a72565b61050b565b005b6101a7610214366004612bab565b61061c565b6008545b6040519081526020016101b3565b610204610239366004612923565b610631565b61020461024c3660046128cd565b610662565b61020461025f366004612bab565b61074d565b61021d610272366004612a72565b6109dc565b610204610285366004612923565b610a72565b61021d610298366004612bab565b610a8d565b600c546101e4906001600160a01b031681565b6101e46102be366004612bab565b610b20565b61021d6102d13660046128cd565b610b97565b610204610c1e565b6102046102ec366004612bdd565b610c59565b6101e4610e06565b6101c4610e15565b61020461030f366004612b3f565b610e24565b610204610322366004612a44565b6111b1565b610204610335366004612af5565b611272565b610204610348366004612964565b611707565b6101c461035b366004612bab565b611739565b61021d611811565b61037b610376366004612bab565b611821565b6040516101b39190612edb565b610204610396366004612bab565b61194a565b6101a76103a93660046128ea565b611a6d565b6102046103bc3660046128cd565b611a9b565b60006001600160e01b0319821663780e9d6360e01b14806103e657506103e682611b3b565b92915050565b6060600f80546103fb90612fe1565b80601f016020809104026020016040519081016040528092919081815260200182805461042790612fe1565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b600061048982611b8b565b6104ef5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061051682610b20565b9050806001600160a01b0316836001600160a01b031614156105845760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104e6565b336001600160a01b03821614806105a057506105a08133611a6d565b61060d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104e6565b6106178383611ba8565b505050565b600081158015906103e6575050600d54101590565b61063b3382611c16565b6106575760405162461bcd60e51b81526004016104e690612e2e565b610617838383611ce0565b3361066b610e06565b6001600160a01b0316146106915760405162461bcd60e51b81526004016104e690612dc2565b6002600b5414156106b45760405162461bcd60e51b81526004016104e690612e7f565b6002600b55600c546001600160a01b03828116911614156106e75760405162461bcd60e51b81526004016104e690612eb6565b600c80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed910160405180910390a150506001600b55565b6002600b5414156107705760405162461bcd60e51b81526004016104e690612e7f565b6002600b5561077e8161061c565b61079a5760405162461bcd60e51b81526004016104e690612d99565b6000818152600e602052604090206001810154600682015460058301546001600160a01b039283169290911690421015806107e057506006830154600160a81b900460ff165b61081b5760405162461bcd60e51b815260206004820152600c60248201526b1cdd1a5b1b081b1bd8dad95960a21b60448201526064016104e6565b600483015460ff166108615760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e4818db185a5b5959608a1b60448201526064016104e6565b3361086b85610b20565b6001600160a01b0316146108915760405162461bcd60e51b81526004016104e690612df7565b60048301805460ff191690556108a684611d1d565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906108d5908590600401612c79565b60206040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190612bc4565b6040516352f950a960e11b81529091506001600160a01b0383169063a5f2a1529061095890869033908690600401612c8d565b600060405180830381600087803b15801561097257600080fd5b505af1158015610986573d6000803e3d6000fd5b50505050600184015460405182815233916001600160a01b03169087907ffeb2000dca3e617cd6f3a8bbb63014bb54a124aac6ccbf73ee7229b4cd01f1209060200160405180910390a450506001600b55505050565b60006109e783610b97565b8210610a495760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104e6565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61061783838360405180602001604052806000815250611707565b6000610a9860085490565b8210610afb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104e6565b60088281548110610b0e57610b0e61308d565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806103e65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104e6565b60006001600160a01b038216610c025760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104e6565b506001600160a01b031660009081526003602052604090205490565b33610c27610e06565b6001600160a01b031614610c4d5760405162461bcd60e51b81526004016104e690612dc2565b610c576000611db2565b565b600c546001600160a01b03163314610ca35760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9037b832b930ba37b960991b60448201526064016104e6565b6002600b541415610cc65760405162461bcd60e51b81526004016104e690612e7f565b6002600b55610cd48261061c565b610d0f5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206c6f636b60a01b60448201526064016104e6565b6000828152600e602052604090206006810154600160a01b900460ff16610d705760405162461bcd60e51b81526020600482015260156024820152746e6f7420616c6c6f77656420746f20756e6c6f636b60581b60448201526064016104e6565b600681015460ff600160a81b9091041615158215151415610da35760405162461bcd60e51b81526004016104e690612eb6565b600681018054831515600160a81b0260ff60a81b1990911617905560405183907f792b43b1b60ef204becc6f6a88af423f27a24b1197259bb393969f019489723090610df490851515815260200190565b60405180910390a250506001600b5550565b600a546001600160a01b031690565b6060601080546103fb90612fe1565b33610e2d610e06565b6001600160a01b031614610e535760405162461bcd60e51b81526004016104e690612dc2565b610f1d600f8054610e6390612fe1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8f90612fe1565b8015610edc5780601f10610eb157610100808354040283529160200191610edc565b820191906000526020600020905b815481529060010190602001808311610ebf57829003601f168201915b505050505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e0492505050565b610fff576000600f8054610f3090612fe1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5c90612fe1565b8015610fa95780601f10610f7e57610100808354040283529160200191610fa9565b820191906000526020600020905b815481529060010190602001808311610f8c57829003601f168201915b505050505090508484600f9190610fc19291906127de565b507fe08ba098c56583ff7ce264f98fb97b7ddc5e6af834acc0556b24327f72a555f9818686604051610ff593929190612d01565b60405180910390a1505b6110c96010805461100f90612fe1565b80601f016020809104026020016040519081016040528092919081815260200182805461103b90612fe1565b80156110885780601f1061105d57610100808354040283529160200191611088565b820191906000526020600020905b81548152906001019060200180831161106b57829003601f168201915b505050505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e0492505050565b6111ab576000601080546110dc90612fe1565b80601f016020809104026020016040519081016040528092919081815260200182805461110890612fe1565b80156111555780601f1061112a57610100808354040283529160200191611155565b820191906000526020600020905b81548152906001019060200180831161113857829003601f168201915b5050505050905082826010919061116d9291906127de565b507f68023cab388c6052af3fa625f164cd0c14cc9125d57286fbe0d9b384847c4c028184846040516111a193929190612d01565b60405180910390a1505b50505050565b6001600160a01b0382163314156112065760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104e6565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6002600b5414156112955760405162461bcd60e51b81526004016104e690612e7f565b6002600b55826112d55760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b60448201526064016104e6565b4282116113125760405162461bcd60e51b815260206004820152600b60248201526a1d1a5b59481c185cdcd95960aa1b60448201526064016104e6565b6402540be400821080611326575060001982145b6113615760405162461bcd60e51b815260206004820152600c60248201526b746f6f20666172206177617960a01b60448201526064016104e6565b61136f600d80546001019055565b600061137a600d5490565b9050600060405161138a90612862565b604051809103906000f0801580156113a6573d6000803e3d6000fd5b5090506000866001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016113d79190612c79565b60206040518083038186803b1580156113ef57600080fd5b505afa158015611403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114279190612bc4565b905061143e6001600160a01b038816338489611e5d565b6040516370a0823160e01b815281906001600160a01b038916906370a082319061146c908690600401612c79565b60206040518083038186803b15801561148457600080fd5b505afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190612bc4565b6114c69190612f9e565b6000848152600e60205260409020600201549096506001600160a01b0316156115225760405162461bcd60e51b815260206004820152600e60248201526d616c72656164792065786973747360901b60448201526064016104e6565b604051806101200160405280848152602001886001600160a01b03168152602001336001600160a01b03168152602001878152602001600115158152602001868152602001836001600160a01b03168152602001851515815260200160001515815250600e60008581526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a0820151816005015560c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160060160146101000a81548160ff0219169083151502179055506101008201518160060160156101000a81548160ff0219169083151502179055509050506116ab3384611eb5565b336001600160a01b0316876001600160a01b0316847f2161ac88b058ae4333d49c523005a7ecef8267ac631690891d19a7e1939e2a8a896040516116f191815260200190565b60405180910390a450506001600b555050505050565b6117113383611c16565b61172d5760405162461bcd60e51b81526004016104e690612e2e565b6111ab84848484611fe2565b606061174482611b8b565b6117a85760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104e6565b60006117bf60408051602081019091526000815290565b905060008151116117df576040518060200160405280600081525061180a565b806117e984612015565b6040516020016117fa929190612c4a565b6040516020818303038152906040525b9392505050565b600061181c600d5490565b905090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526118738261061c565b6118ae5760405162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b60448201526064016104e6565b506000908152600e60209081526040918290208251610120810184528154815260018201546001600160a01b0390811693820193909352600282015483169381019390935260038101546060840152600481015460ff90811615156080850152600582015460a085015260069091015491821660c0840152600160a01b82048116151560e0840152600160a81b90910416151561010082015290565b6002600b54141561196d5760405162461bcd60e51b81526004016104e690612e7f565b6002600b5561197b8161061c565b6119975760405162461bcd60e51b81526004016104e690612d99565b336119a182610b20565b6001600160a01b0316146119c75760405162461bcd60e51b81526004016104e690612df7565b6000818152600e602052604090206006810154600160a01b900460ff16611a295760405162461bcd60e51b8152602060048201526016602482015275616c7265616479206e6f7420756e6c6f636b61626c6560501b60448201526064016104e6565b60068101805461ffff60a01b1916905560405182907f4bd73e01527860a4a8a261d8a9919d5cabb8fd0b2c4c4b433c2072f5371bc75c90600090a250506001600b55565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33611aa4610e06565b6001600160a01b031614611aca5760405162461bcd60e51b81526004016104e690612dc2565b6001600160a01b038116611b2f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104e6565b611b3881611db2565b50565b60006001600160e01b031982166380ac58cd60e01b1480611b6c57506001600160e01b03198216635b5e139f60e01b145b806103e657506301ffc9a760e01b6001600160e01b03198316146103e6565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611bdd82610b20565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c2182611b8b565b611c825760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104e6565b6000611c8d83610b20565b9050806001600160a01b0316846001600160a01b03161480611cc85750836001600160a01b0316611cbd8461047e565b6001600160a01b0316145b80611cd85750611cd88185611a6d565b949350505050565b6002600b541415611d035760405162461bcd60e51b81526004016104e690612e7f565b6002600b55611d13838383612113565b50506001600b5550565b6000611d2882610b20565b9050611d36816000846122ac565b611d41600083611ba8565b6001600160a01b0381166000908152600360205260408120805460019290611d6a908490612f9e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206135c7833981519152908390a45050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081604051602001611e179190612c2e565b6040516020818303038152906040528051906020012083604051602001611e3e9190612c2e565b6040516020818303038152906040528051906020012014905092915050565b6111ab846323b872dd60e01b858585604051602401611e7e93929190612c8d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612364565b6001600160a01b038216611f0b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104e6565b611f1481611b8b565b15611f615760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104e6565b611f6d600083836122ac565b6001600160a01b0382166000908152600360205260408120805460019290611f96908490612f72565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206135c7833981519152908290a45050565b611fed848484611ce0565b611ff984848484612436565b6111ab5760405162461bcd60e51b81526004016104e690612d47565b6060816120395750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612063578061204d8161301c565b915061205c9050600a83612f8a565b915061203d565b60008167ffffffffffffffff81111561207e5761207e6130a3565b6040519080825280601f01601f1916602001820160405280156120a8576020820181803683370190505b5090505b8415611cd8576120bd600183612f9e565b91506120ca600a86613037565b6120d5906030612f72565b60f81b8183815181106120ea576120ea61308d565b60200101906001600160f81b031916908160001a90535061210c600a86612f8a565b94506120ac565b826001600160a01b031661212682610b20565b6001600160a01b03161461218e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104e6565b6001600160a01b0382166121f05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104e6565b6121fb8383836122ac565b612206600082611ba8565b6001600160a01b038316600090815260036020526040812080546001929061222f908490612f9e565b90915550506001600160a01b038216600090815260036020526040812080546001929061225d908490612f72565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206135c783398151915291a4505050565b6001600160a01b0383166123075761230281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61232a565b816001600160a01b0316836001600160a01b03161461232a5761232a8382612543565b6001600160a01b03821661234157610617816125e0565b826001600160a01b0316826001600160a01b03161461061757610617828261268f565b60006123b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126d39092919063ffffffff16565b80519091501561061757808060200190518101906123d79190612a9e565b6106175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e6565b60006001600160a01b0384163b1561253857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061247a903390899088908890600401612cb1565b602060405180830381600087803b15801561249457600080fd5b505af19250505080156124c4575060408051601f3d908101601f191682019092526124c191810190612ad8565b60015b61251e573d8080156124f2576040519150601f19603f3d011682016040523d82523d6000602084013e6124f7565b606091505b5080516125165760405162461bcd60e51b81526004016104e690612d47565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cd8565b506001949350505050565b6000600161255084610b97565b61255a9190612f9e565b6000838152600760205260409020549091508082146125ad576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906125f290600190612f9e565b6000838152600960205260408120546008805493945090928490811061261a5761261a61308d565b90600052602060002001549050806008838154811061263b5761263b61308d565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061267357612673613077565b6001900381819060005260206000200160009055905550505050565b600061269a83610b97565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6060611cd8848460008585843b61272c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e6565b600080866001600160a01b031685876040516127489190612c2e565b60006040518083038185875af1925050503d8060008114612785576040519150601f19603f3d011682016040523d82523d6000602084013e61278a565b606091505b509150915061279a8282866127a5565b979650505050505050565b606083156127b457508161180a565b8251156127c45782518084602001fd5b8160405162461bcd60e51b81526004016104e69190612cee565b8280546127ea90612fe1565b90600052602060002090601f01602090048101928261280c5760008555612852565b82601f106128255782800160ff19823516178555612852565b82800160010185558215612852579182015b82811115612852578235825591602001919060010190612837565b5061285e92915061286f565b5090565b6104d4806130f383390190565b5b8082111561285e5760008155600101612870565b60008083601f84011261289657600080fd5b50813567ffffffffffffffff8111156128ae57600080fd5b6020830191508360208285010111156128c657600080fd5b9250929050565b6000602082840312156128df57600080fd5b813561180a816130b9565b600080604083850312156128fd57600080fd5b8235612908816130b9565b91506020830135612918816130b9565b809150509250929050565b60008060006060848603121561293857600080fd5b8335612943816130b9565b92506020840135612953816130b9565b929592945050506040919091013590565b6000806000806080858703121561297a57600080fd5b8435612985816130b9565b93506020850135612995816130b9565b925060408501359150606085013567ffffffffffffffff808211156129b957600080fd5b818701915087601f8301126129cd57600080fd5b8135818111156129df576129df6130a3565b604051601f8201601f19908116603f01168101908382118183101715612a0757612a076130a3565b816040528281528a6020848701011115612a2057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612a5757600080fd5b8235612a62816130b9565b91506020830135612918816130ce565b60008060408385031215612a8557600080fd5b8235612a90816130b9565b946020939093013593505050565b600060208284031215612ab057600080fd5b815161180a816130ce565b600060208284031215612acd57600080fd5b813561180a816130dc565b600060208284031215612aea57600080fd5b815161180a816130dc565b60008060008060808587031215612b0b57600080fd5b8435612b16816130b9565b935060208501359250604085013591506060850135612b34816130ce565b939692955090935050565b60008060008060408587031215612b5557600080fd5b843567ffffffffffffffff80821115612b6d57600080fd5b612b7988838901612884565b90965094506020870135915080821115612b9257600080fd5b50612b9f87828801612884565b95989497509550505050565b600060208284031215612bbd57600080fd5b5035919050565b600060208284031215612bd657600080fd5b5051919050565b60008060408385031215612bf057600080fd5b823591506020830135612918816130ce565b60008151808452612c1a816020860160208601612fb5565b601f01601f19169290920160200192915050565b60008251612c40818460208701612fb5565b9190910192915050565b60008351612c5c818460208801612fb5565b835190830190612c70818360208801612fb5565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ce490830184612c02565b9695505050505050565b60208152600061180a6020830184612c02565b604081526000612d146040830186612c02565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600f908201526e1a5b9d985b1a59081b1bd8dac81a59608a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f6e6f74206f776e6572206f66206c6f636b20736861726520746f6b656e000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600b908201526a185b1c9958591e481cd95d60aa1b604082015260600190565b60006101208201905082518252602083015160018060a01b0380821660208501528060408601511660408501525050606083015160608301526080830151612f27608084018215159052565b5060a083015160a083015260c0830151612f4c60c08401826001600160a01b03169052565b5060e0830151612f6060e084018215159052565b50610100928301511515919092015290565b60008219821115612f8557612f8561304b565b500190565b600082612f9957612f99613061565b500490565b600082821015612fb057612fb061304b565b500390565b60005b83811015612fd0578181015183820152602001612fb8565b838111156111ab5750506000910152565b600181811c90821680612ff557607f821691505b6020821081141561301657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156130305761303061304b565b5060010190565b60008261304657613046613061565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611b3857600080fd5b8015158114611b3857600080fd5b6001600160e01b031981168114611b3857600080fdfe60a060405234801561001057600080fd5b5033606081901b60805261049d6100376000396000818160550152609e015261049d6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a5f2a1521461003b578063d7b96d4e14610050575b600080fd5b61004e61004936600461038f565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100c857600080fd5b6100dc6001600160a01b03841683836100e1565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526100dc928692916000916101719185169084906101f3565b8051909150156100dc578080602001905181019061018f919061036d565b6100dc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610202848460008561020c565b90505b9392505050565b60608247101561026d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ea565b843b6102bb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ea565b600080866001600160a01b031685876040516102d791906103d0565b60006040518083038185875af1925050503d8060008114610314576040519150601f19603f3d011682016040523d82523d6000602084013e610319565b606091505b5091509150610329828286610334565b979650505050505050565b60608315610343575081610205565b8251156103535782518084602001fd5b8160405162461bcd60e51b81526004016101ea91906103ec565b60006020828403121561037f57600080fd5b8151801515811461020557600080fd5b6000806000606084860312156103a457600080fd5b83356103af8161044f565b925060208401356103bf8161044f565b929592945050506040919091013590565b600082516103e281846020870161041f565b9190910192915050565b602081526000825180602084015261040b81604085016020870161041f565b601f01601f19169190910160400192915050565b60005b8381101561043a578181015183820152602001610422565b83811115610449576000848401525b50505050565b6001600160a01b038116811461046457600080fd5b5056fea2646970667358221220f1df02778a4658d7810dc455242e4b79feb16424fa5b291924db2c894c222a9864736f6c63430008060033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220197ab4d429217b9fe0e857b82cb1091d3c7c0711f467313d92c3e07ed8aeb9ed64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018f5760003560e01c806370a08231116100e4578063a3f7970b11610092578063a3f7970b14610327578063b88d4fde1461033a578063c87b56dd1461034d578063d0cb39c614610360578063d68f4dd114610368578063db16143a14610388578063e985e9c51461039b578063f2fde38b146103ae57600080fd5b806370a08231146102c3578063715018a6146102d65780637f0e964b146102de5780638da5cb5b146102f157806395d89b41146102f95780639a708be314610301578063a22cb4651461031457600080fd5b806329605e771161014157806329605e771461023e5780632e1a7d4d146102515780632f745c591461026457806342842e0e146102775780634f6ccce71461028a578063570ca7351461029d5780636352211e146102b057600080fd5b806301ffc9a71461019457806306fdde03146101bc578063081812fc146101d1578063095ea7b3146101f1578063143f39ee1461020657806318160ddd1461021957806323b872dd1461022b575b600080fd5b6101a76101a2366004612abb565b6103c1565b60405190151581526020015b60405180910390f35b6101c46103ec565b6040516101b39190612cee565b6101e46101df366004612bab565b61047e565b6040516101b39190612c79565b6102046101ff366004612a72565b61050b565b005b6101a7610214366004612bab565b61061c565b6008545b6040519081526020016101b3565b610204610239366004612923565b610631565b61020461024c3660046128cd565b610662565b61020461025f366004612bab565b61074d565b61021d610272366004612a72565b6109dc565b610204610285366004612923565b610a72565b61021d610298366004612bab565b610a8d565b600c546101e4906001600160a01b031681565b6101e46102be366004612bab565b610b20565b61021d6102d13660046128cd565b610b97565b610204610c1e565b6102046102ec366004612bdd565b610c59565b6101e4610e06565b6101c4610e15565b61020461030f366004612b3f565b610e24565b610204610322366004612a44565b6111b1565b610204610335366004612af5565b611272565b610204610348366004612964565b611707565b6101c461035b366004612bab565b611739565b61021d611811565b61037b610376366004612bab565b611821565b6040516101b39190612edb565b610204610396366004612bab565b61194a565b6101a76103a93660046128ea565b611a6d565b6102046103bc3660046128cd565b611a9b565b60006001600160e01b0319821663780e9d6360e01b14806103e657506103e682611b3b565b92915050565b6060600f80546103fb90612fe1565b80601f016020809104026020016040519081016040528092919081815260200182805461042790612fe1565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b600061048982611b8b565b6104ef5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061051682610b20565b9050806001600160a01b0316836001600160a01b031614156105845760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104e6565b336001600160a01b03821614806105a057506105a08133611a6d565b61060d5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016104e6565b6106178383611ba8565b505050565b600081158015906103e6575050600d54101590565b61063b3382611c16565b6106575760405162461bcd60e51b81526004016104e690612e2e565b610617838383611ce0565b3361066b610e06565b6001600160a01b0316146106915760405162461bcd60e51b81526004016104e690612dc2565b6002600b5414156106b45760405162461bcd60e51b81526004016104e690612e7f565b6002600b55600c546001600160a01b03828116911614156106e75760405162461bcd60e51b81526004016104e690612eb6565b600c80546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f74da04524d50c64947f5dd5381ef1a4dca5cba8ed1d816243f9e48aa0b5617ed910160405180910390a150506001600b55565b6002600b5414156107705760405162461bcd60e51b81526004016104e690612e7f565b6002600b5561077e8161061c565b61079a5760405162461bcd60e51b81526004016104e690612d99565b6000818152600e602052604090206001810154600682015460058301546001600160a01b039283169290911690421015806107e057506006830154600160a81b900460ff165b61081b5760405162461bcd60e51b815260206004820152600c60248201526b1cdd1a5b1b081b1bd8dad95960a21b60448201526064016104e6565b600483015460ff166108615760405162461bcd60e51b815260206004820152600f60248201526e185b1c9958591e4818db185a5b5959608a1b60448201526064016104e6565b3361086b85610b20565b6001600160a01b0316146108915760405162461bcd60e51b81526004016104e690612df7565b60048301805460ff191690556108a684611d1d565b6040516370a0823160e01b81526000906001600160a01b038416906370a08231906108d5908590600401612c79565b60206040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190612bc4565b6040516352f950a960e11b81529091506001600160a01b0383169063a5f2a1529061095890869033908690600401612c8d565b600060405180830381600087803b15801561097257600080fd5b505af1158015610986573d6000803e3d6000fd5b50505050600184015460405182815233916001600160a01b03169087907ffeb2000dca3e617cd6f3a8bbb63014bb54a124aac6ccbf73ee7229b4cd01f1209060200160405180910390a450506001600b55505050565b60006109e783610b97565b8210610a495760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104e6565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61061783838360405180602001604052806000815250611707565b6000610a9860085490565b8210610afb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104e6565b60088281548110610b0e57610b0e61308d565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806103e65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016104e6565b60006001600160a01b038216610c025760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016104e6565b506001600160a01b031660009081526003602052604090205490565b33610c27610e06565b6001600160a01b031614610c4d5760405162461bcd60e51b81526004016104e690612dc2565b610c576000611db2565b565b600c546001600160a01b03163314610ca35760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9037b832b930ba37b960991b60448201526064016104e6565b6002600b541415610cc65760405162461bcd60e51b81526004016104e690612e7f565b6002600b55610cd48261061c565b610d0f5760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206c6f636b60a01b60448201526064016104e6565b6000828152600e602052604090206006810154600160a01b900460ff16610d705760405162461bcd60e51b81526020600482015260156024820152746e6f7420616c6c6f77656420746f20756e6c6f636b60581b60448201526064016104e6565b600681015460ff600160a81b9091041615158215151415610da35760405162461bcd60e51b81526004016104e690612eb6565b600681018054831515600160a81b0260ff60a81b1990911617905560405183907f792b43b1b60ef204becc6f6a88af423f27a24b1197259bb393969f019489723090610df490851515815260200190565b60405180910390a250506001600b5550565b600a546001600160a01b031690565b6060601080546103fb90612fe1565b33610e2d610e06565b6001600160a01b031614610e535760405162461bcd60e51b81526004016104e690612dc2565b610f1d600f8054610e6390612fe1565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8f90612fe1565b8015610edc5780601f10610eb157610100808354040283529160200191610edc565b820191906000526020600020905b815481529060010190602001808311610ebf57829003601f168201915b505050505085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e0492505050565b610fff576000600f8054610f3090612fe1565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5c90612fe1565b8015610fa95780601f10610f7e57610100808354040283529160200191610fa9565b820191906000526020600020905b815481529060010190602001808311610f8c57829003601f168201915b505050505090508484600f9190610fc19291906127de565b507fe08ba098c56583ff7ce264f98fb97b7ddc5e6af834acc0556b24327f72a555f9818686604051610ff593929190612d01565b60405180910390a1505b6110c96010805461100f90612fe1565b80601f016020809104026020016040519081016040528092919081815260200182805461103b90612fe1565b80156110885780601f1061105d57610100808354040283529160200191611088565b820191906000526020600020905b81548152906001019060200180831161106b57829003601f168201915b505050505083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e0492505050565b6111ab576000601080546110dc90612fe1565b80601f016020809104026020016040519081016040528092919081815260200182805461110890612fe1565b80156111555780601f1061112a57610100808354040283529160200191611155565b820191906000526020600020905b81548152906001019060200180831161113857829003601f168201915b5050505050905082826010919061116d9291906127de565b507f68023cab388c6052af3fa625f164cd0c14cc9125d57286fbe0d9b384847c4c028184846040516111a193929190612d01565b60405180910390a1505b50505050565b6001600160a01b0382163314156112065760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104e6565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6002600b5414156112955760405162461bcd60e51b81526004016104e690612e7f565b6002600b55826112d55760405162461bcd60e51b815260206004820152600b60248201526a1e995c9bc8185b5bdd5b9d60aa1b60448201526064016104e6565b4282116113125760405162461bcd60e51b815260206004820152600b60248201526a1d1a5b59481c185cdcd95960aa1b60448201526064016104e6565b6402540be400821080611326575060001982145b6113615760405162461bcd60e51b815260206004820152600c60248201526b746f6f20666172206177617960a01b60448201526064016104e6565b61136f600d80546001019055565b600061137a600d5490565b9050600060405161138a90612862565b604051809103906000f0801580156113a6573d6000803e3d6000fd5b5090506000866001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016113d79190612c79565b60206040518083038186803b1580156113ef57600080fd5b505afa158015611403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114279190612bc4565b905061143e6001600160a01b038816338489611e5d565b6040516370a0823160e01b815281906001600160a01b038916906370a082319061146c908690600401612c79565b60206040518083038186803b15801561148457600080fd5b505afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190612bc4565b6114c69190612f9e565b6000848152600e60205260409020600201549096506001600160a01b0316156115225760405162461bcd60e51b815260206004820152600e60248201526d616c72656164792065786973747360901b60448201526064016104e6565b604051806101200160405280848152602001886001600160a01b03168152602001336001600160a01b03168152602001878152602001600115158152602001868152602001836001600160a01b03168152602001851515815260200160001515815250600e60008581526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a0820151816005015560c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160060160146101000a81548160ff0219169083151502179055506101008201518160060160156101000a81548160ff0219169083151502179055509050506116ab3384611eb5565b336001600160a01b0316876001600160a01b0316847f2161ac88b058ae4333d49c523005a7ecef8267ac631690891d19a7e1939e2a8a896040516116f191815260200190565b60405180910390a450506001600b555050505050565b6117113383611c16565b61172d5760405162461bcd60e51b81526004016104e690612e2e565b6111ab84848484611fe2565b606061174482611b8b565b6117a85760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016104e6565b60006117bf60408051602081019091526000815290565b905060008151116117df576040518060200160405280600081525061180a565b806117e984612015565b6040516020016117fa929190612c4a565b6040516020818303038152906040525b9392505050565b600061181c600d5490565b905090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526118738261061c565b6118ae5760405162461bcd60e51b815260206004820152600c60248201526b6f7574206f662072616e676560a01b60448201526064016104e6565b506000908152600e60209081526040918290208251610120810184528154815260018201546001600160a01b0390811693820193909352600282015483169381019390935260038101546060840152600481015460ff90811615156080850152600582015460a085015260069091015491821660c0840152600160a01b82048116151560e0840152600160a81b90910416151561010082015290565b6002600b54141561196d5760405162461bcd60e51b81526004016104e690612e7f565b6002600b5561197b8161061c565b6119975760405162461bcd60e51b81526004016104e690612d99565b336119a182610b20565b6001600160a01b0316146119c75760405162461bcd60e51b81526004016104e690612df7565b6000818152600e602052604090206006810154600160a01b900460ff16611a295760405162461bcd60e51b8152602060048201526016602482015275616c7265616479206e6f7420756e6c6f636b61626c6560501b60448201526064016104e6565b60068101805461ffff60a01b1916905560405182907f4bd73e01527860a4a8a261d8a9919d5cabb8fd0b2c4c4b433c2072f5371bc75c90600090a250506001600b55565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33611aa4610e06565b6001600160a01b031614611aca5760405162461bcd60e51b81526004016104e690612dc2565b6001600160a01b038116611b2f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104e6565b611b3881611db2565b50565b60006001600160e01b031982166380ac58cd60e01b1480611b6c57506001600160e01b03198216635b5e139f60e01b145b806103e657506301ffc9a760e01b6001600160e01b03198316146103e6565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611bdd82610b20565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c2182611b8b565b611c825760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104e6565b6000611c8d83610b20565b9050806001600160a01b0316846001600160a01b03161480611cc85750836001600160a01b0316611cbd8461047e565b6001600160a01b0316145b80611cd85750611cd88185611a6d565b949350505050565b6002600b541415611d035760405162461bcd60e51b81526004016104e690612e7f565b6002600b55611d13838383612113565b50506001600b5550565b6000611d2882610b20565b9050611d36816000846122ac565b611d41600083611ba8565b6001600160a01b0381166000908152600360205260408120805460019290611d6a908490612f9e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416906000805160206135c7833981519152908390a45050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081604051602001611e179190612c2e565b6040516020818303038152906040528051906020012083604051602001611e3e9190612c2e565b6040516020818303038152906040528051906020012014905092915050565b6111ab846323b872dd60e01b858585604051602401611e7e93929190612c8d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612364565b6001600160a01b038216611f0b5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104e6565b611f1481611b8b565b15611f615760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104e6565b611f6d600083836122ac565b6001600160a01b0382166000908152600360205260408120805460019290611f96908490612f72565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206135c7833981519152908290a45050565b611fed848484611ce0565b611ff984848484612436565b6111ab5760405162461bcd60e51b81526004016104e690612d47565b6060816120395750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612063578061204d8161301c565b915061205c9050600a83612f8a565b915061203d565b60008167ffffffffffffffff81111561207e5761207e6130a3565b6040519080825280601f01601f1916602001820160405280156120a8576020820181803683370190505b5090505b8415611cd8576120bd600183612f9e565b91506120ca600a86613037565b6120d5906030612f72565b60f81b8183815181106120ea576120ea61308d565b60200101906001600160f81b031916908160001a90535061210c600a86612f8a565b94506120ac565b826001600160a01b031661212682610b20565b6001600160a01b03161461218e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016104e6565b6001600160a01b0382166121f05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104e6565b6121fb8383836122ac565b612206600082611ba8565b6001600160a01b038316600090815260036020526040812080546001929061222f908490612f9e565b90915550506001600160a01b038216600090815260036020526040812080546001929061225d908490612f72565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206135c783398151915291a4505050565b6001600160a01b0383166123075761230281600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61232a565b816001600160a01b0316836001600160a01b03161461232a5761232a8382612543565b6001600160a01b03821661234157610617816125e0565b826001600160a01b0316826001600160a01b03161461061757610617828261268f565b60006123b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126d39092919063ffffffff16565b80519091501561061757808060200190518101906123d79190612a9e565b6106175760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e6565b60006001600160a01b0384163b1561253857604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061247a903390899088908890600401612cb1565b602060405180830381600087803b15801561249457600080fd5b505af19250505080156124c4575060408051601f3d908101601f191682019092526124c191810190612ad8565b60015b61251e573d8080156124f2576040519150601f19603f3d011682016040523d82523d6000602084013e6124f7565b606091505b5080516125165760405162461bcd60e51b81526004016104e690612d47565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cd8565b506001949350505050565b6000600161255084610b97565b61255a9190612f9e565b6000838152600760205260409020549091508082146125ad576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906125f290600190612f9e565b6000838152600960205260408120546008805493945090928490811061261a5761261a61308d565b90600052602060002001549050806008838154811061263b5761263b61308d565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061267357612673613077565b6001900381819060005260206000200160009055905550505050565b600061269a83610b97565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6060611cd8848460008585843b61272c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e6565b600080866001600160a01b031685876040516127489190612c2e565b60006040518083038185875af1925050503d8060008114612785576040519150601f19603f3d011682016040523d82523d6000602084013e61278a565b606091505b509150915061279a8282866127a5565b979650505050505050565b606083156127b457508161180a565b8251156127c45782518084602001fd5b8160405162461bcd60e51b81526004016104e69190612cee565b8280546127ea90612fe1565b90600052602060002090601f01602090048101928261280c5760008555612852565b82601f106128255782800160ff19823516178555612852565b82800160010185558215612852579182015b82811115612852578235825591602001919060010190612837565b5061285e92915061286f565b5090565b6104d4806130f383390190565b5b8082111561285e5760008155600101612870565b60008083601f84011261289657600080fd5b50813567ffffffffffffffff8111156128ae57600080fd5b6020830191508360208285010111156128c657600080fd5b9250929050565b6000602082840312156128df57600080fd5b813561180a816130b9565b600080604083850312156128fd57600080fd5b8235612908816130b9565b91506020830135612918816130b9565b809150509250929050565b60008060006060848603121561293857600080fd5b8335612943816130b9565b92506020840135612953816130b9565b929592945050506040919091013590565b6000806000806080858703121561297a57600080fd5b8435612985816130b9565b93506020850135612995816130b9565b925060408501359150606085013567ffffffffffffffff808211156129b957600080fd5b818701915087601f8301126129cd57600080fd5b8135818111156129df576129df6130a3565b604051601f8201601f19908116603f01168101908382118183101715612a0757612a076130a3565b816040528281528a6020848701011115612a2057600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612a5757600080fd5b8235612a62816130b9565b91506020830135612918816130ce565b60008060408385031215612a8557600080fd5b8235612a90816130b9565b946020939093013593505050565b600060208284031215612ab057600080fd5b815161180a816130ce565b600060208284031215612acd57600080fd5b813561180a816130dc565b600060208284031215612aea57600080fd5b815161180a816130dc565b60008060008060808587031215612b0b57600080fd5b8435612b16816130b9565b935060208501359250604085013591506060850135612b34816130ce565b939692955090935050565b60008060008060408587031215612b5557600080fd5b843567ffffffffffffffff80821115612b6d57600080fd5b612b7988838901612884565b90965094506020870135915080821115612b9257600080fd5b50612b9f87828801612884565b95989497509550505050565b600060208284031215612bbd57600080fd5b5035919050565b600060208284031215612bd657600080fd5b5051919050565b60008060408385031215612bf057600080fd5b823591506020830135612918816130ce565b60008151808452612c1a816020860160208601612fb5565b601f01601f19169290920160200192915050565b60008251612c40818460208701612fb5565b9190910192915050565b60008351612c5c818460208801612fb5565b835190830190612c70818360208801612fb5565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ce490830184612c02565b9695505050505050565b60208152600061180a6020830184612c02565b604081526000612d146040830186612c02565b8281036020840152838152838560208301376000602085830101526020601f19601f860116820101915050949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252600f908201526e1a5b9d985b1a59081b1bd8dac81a59608a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601d908201527f6e6f74206f776e6572206f66206c6f636b20736861726520746f6b656e000000604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600b908201526a185b1c9958591e481cd95d60aa1b604082015260600190565b60006101208201905082518252602083015160018060a01b0380821660208501528060408601511660408501525050606083015160608301526080830151612f27608084018215159052565b5060a083015160a083015260c0830151612f4c60c08401826001600160a01b03169052565b5060e0830151612f6060e084018215159052565b50610100928301511515919092015290565b60008219821115612f8557612f8561304b565b500190565b600082612f9957612f99613061565b500490565b600082821015612fb057612fb061304b565b500390565b60005b83811015612fd0578181015183820152602001612fb8565b838111156111ab5750506000910152565b600181811c90821680612ff557607f821691505b6020821081141561301657634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156130305761303061304b565b5060010190565b60008261304657613046613061565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611b3857600080fd5b8015158114611b3857600080fd5b6001600160e01b031981168114611b3857600080fdfe60a060405234801561001057600080fd5b5033606081901b60805261049d6100376000396000818160550152609e015261049d6000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a5f2a1521461003b578063d7b96d4e14610050575b600080fd5b61004e61004936600461038f565b610093565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100c857600080fd5b6100dc6001600160a01b03841683836100e1565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526100dc928692916000916101719185169084906101f3565b8051909150156100dc578080602001905181019061018f919061036d565b6100dc5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b6060610202848460008561020c565b90505b9392505050565b60608247101561026d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101ea565b843b6102bb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101ea565b600080866001600160a01b031685876040516102d791906103d0565b60006040518083038185875af1925050503d8060008114610314576040519150601f19603f3d011682016040523d82523d6000602084013e610319565b606091505b5091509150610329828286610334565b979650505050505050565b60608315610343575081610205565b8251156103535782518084602001fd5b8160405162461bcd60e51b81526004016101ea91906103ec565b60006020828403121561037f57600080fd5b8151801515811461020557600080fd5b6000806000606084860312156103a457600080fd5b83356103af8161044f565b925060208401356103bf8161044f565b929592945050506040919091013590565b600082516103e281846020870161041f565b9190910192915050565b602081526000825180602084015261040b81604085016020870161041f565b601f01601f19169190910160400192915050565b60005b8381101561043a578181015183820152602001610422565b83811115610449576000848401525b50505050565b6001600160a01b038116811461046457600080fd5b5056fea2646970667358221220f1df02778a4658d7810dc455242e4b79feb16424fa5b291924db2c894c222a9864736f6c63430008060033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220197ab4d429217b9fe0e857b82cb1091d3c7c0711f467313d92c3e07ed8aeb9ed64736f6c63430008060033",
  "devdoc": {
    "author": "Muse",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "changeLockStatusByGovernance(uint256,bool)": {
        "details": "This can be useful in case the owner makes a mistake during deployment and the actual withdraw can only be done by the consent of both parties.The frontend should clearly indicate when a lock is unlockable and when it is actually unlocked."
      },
      "createLock(address,uint256,uint256,bool)": {
        "params": {
          "amount": "The amount of tokens to transfer in",
          "token": "The token to transfer in",
          "unlockTimestamp": "The timestamp from which withdrawals become possible",
          "unlockableByGovernance": "Indicates whether the Locker operator should be able to unlock"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getLock(uint256)": {
        "details": "The lock data should be indexed using TheGraph or similar to ensure users can always easily find their lockIds.Reverts in case the lockId is out of range.",
        "returns": {
          "_0": "The lock related to the lockId."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "lastLockId()": {
        "details": "A lastLockId of zero means there are no locks yet!",
        "returns": {
          "_0": "The id of the latest lock."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "lockId": "The id of the locked position"
        }
      }
    },
    "title": "Violin's locker contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeLockStatusByGovernance(uint256,bool)": {
        "notice": "In case the lock owner allows it, governance can disable the timelock."
      },
      "createLock(address,uint256,uint256,bool)": {
        "notice": "Creates a new lock by transferring 'amount' to a newly created holding contract.An NFT with the lockId is minted to the user. This NFT is transferrable and represents the ownership of the lock."
      },
      "disableUnlockableByGovernance(uint256)": {
        "notice": "if the lock owner wants to reduce their privileges further in case they gave governance unlockability, they can call this function."
      },
      "getLock(uint256)": {
        "notice": "Returns information about a specific Lock."
      },
      "isValidLock(uint256)": {
        "notice": "returns whether the lockId exists (is created)"
      },
      "lastLockId()": {
        "notice": "Gets the incremental id of the most recent lock. The first lock is at id 1."
      },
      "name()": {
        "notice": "Override the token name to allow for rebranding."
      },
      "operator()": {
        "notice": "The operator can disable the unlockTimestamp (make a lock withdrawable) if the lock creator permits this."
      },
      "setTokenNameAndSymbol(string,string)": {
        "notice": "The token name and symbol are upgradeable in case of rebranding."
      },
      "symbol()": {
        "notice": "Override the token symbol to allow for rebranding."
      },
      "transferOperator(address)": {
        "notice": "Transfer the operator address to a new address, only callable by owner."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws 'amount' amount of tokens from the locked position. Can only be called by the current owner of the lock NFT.Once the remaining amount reaches zero, the NFT is burned.The ownership share is therefore not fractional as it would complicate things for the user."
      }
    },
    "notice": "The locker contract allows project admins to lock LP tokens for a period",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1042,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1044,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1048,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1052,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1056,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1062,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1981,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1985,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1988,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1992,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/Locker.sol:Locker",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3049,
        "contract": "contracts/Locker.sol:Locker",
        "label": "operator",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3053,
        "contract": "contracts/Locker.sol:Locker",
        "label": "lockIdCounter",
        "offset": 0,
        "slot": "13",
        "type": "t_struct(Counter)2687_storage"
      },
      {
        "astId": 3059,
        "contract": "contracts/Locker.sol:Locker",
        "label": "locks",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Lock)3046_storage)"
      },
      {
        "astId": 3063,
        "contract": "contracts/Locker.sol:Locker",
        "label": "tokenName",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3067,
        "contract": "contracts/Locker.sol:Locker",
        "label": "tokenSymbol",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)767": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Lock)3046_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Locker.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)3046_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2687_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2686,
            "contract": "contracts/Locker.sol:Locker",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Lock)3046_storage": {
        "encoding": "inplace",
        "label": "struct Locker.Lock",
        "members": [
          {
            "astId": 3020,
            "contract": "contracts/Locker.sol:Locker",
            "label": "lockId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3024,
            "contract": "contracts/Locker.sol:Locker",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)767"
          },
          {
            "astId": 3027,
            "contract": "contracts/Locker.sol:Locker",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3030,
            "contract": "contracts/Locker.sol:Locker",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3033,
            "contract": "contracts/Locker.sol:Locker",
            "label": "unclaimed",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 3036,
            "contract": "contracts/Locker.sol:Locker",
            "label": "unlockTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 3039,
            "contract": "contracts/Locker.sol:Locker",
            "label": "holdingContract",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3042,
            "contract": "contracts/Locker.sol:Locker",
            "label": "unlockableByGovernance",
            "offset": 20,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 3045,
            "contract": "contracts/Locker.sol:Locker",
            "label": "unlockedByGovernance",
            "offset": 21,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}